#!/usr/bin/env python3
"""
Test script for RAG sync functionality
Tests bulk loading and suggestion generation
"""

import asyncio
import json
from ai.secure_rag_engine import secure_rag_engine
from ai.rag_pipeline import rag_pipeline

async def test_rag_sync_functionality():
    """Test the complete RAG sync and suggestion workflow"""
    
    print("üß™ TESTING RAG SYNC FUNCTIONALITY")
    print("=" * 50)
    
    # Test 1: Check RAG system status
    print("\n1Ô∏è‚É£ Checking RAG system status...")
    
    if not secure_rag_engine.qdrant_client:
        print("‚ùå Qdrant client not available")
        return False
        
    if not secure_rag_engine.openai_client:
        print("‚ùå OpenAI client not available")
        return False
        
    print("‚úÖ RAG system operational")
    
    # Test 2: Check current data in RAG
    print("\n2Ô∏è‚É£ Current RAG data statistics...")
    
    try:
        collections = secure_rag_engine.qdrant_client.get_collections()
        total_messages = 0
        
        for collection in collections.collections:
            info = secure_rag_engine.qdrant_client.get_collection(collection.name)
            points_count = info.points_count
            total_messages += points_count
            print(f"   üìö {collection.name}: {points_count} points")
        
        print(f"   üìä Total messages in RAG: {total_messages}")
        
    except Exception as e:
        print(f"‚ùå Error checking collections: {e}")
        return False
    
    # Test 3: Test suggestion generation with current data
    print("\n3Ô∏è‚É£ Testing RAG suggestion generation...")
    
    test_session = "test_session_123"
    test_chat = 12345
    test_contexts = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ –¥—É–º–∞–µ—à—å –ø—Ä–æ RAG —Å–∏—Å—Ç–µ–º—É?",
        "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏",
        "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç AI?"
    ]
    
    successful_suggestions = 0
    
    for i, context in enumerate(test_contexts, 1):
        try:
            print(f"\n   üîç Test case {i}: '{context}'")
            
            result = await rag_pipeline.generate_rag_suggestion(
                session_id=test_session,
                chat_id=test_chat,
                current_context=context,
                suggestion_type="response"
            )
            
            if result.get("suggestion"):
                suggestion = result["suggestion"]
                confidence = result.get("confidence", 0)
                source_count = result.get("source_count", 0)
                rag_enhanced = result.get("rag_enhanced", False)
                
                print(f"      ‚úÖ Suggestion: '{suggestion[:100]}{'...' if len(suggestion) > 100 else ''}'")
                print(f"      üìä Confidence: {confidence:.2f}")
                print(f"      üìÑ Sources: {source_count}")
                print(f"      üß† RAG Enhanced: {rag_enhanced}")
                
                successful_suggestions += 1
                
                # Check if it's not a generic starter phrase
                generic_phrases = ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"]
                is_generic = any(phrase in suggestion.lower() for phrase in generic_phrases)
                
                if not is_generic and source_count > 0:
                    print("      üéØ Non-generic, context-aware suggestion!")
                elif is_generic:
                    print("      ‚ö†Ô∏è Generic suggestion detected")
                    
            else:
                print(f"      ‚ùå No suggestion generated")
                if "error" in result:
                    print(f"         Error: {result['error']}")
                    
        except Exception as e:
            print(f"      ‚ùå Error generating suggestion: {e}")
    
    print(f"\n   üìà Success rate: {successful_suggestions}/{len(test_contexts)} ({successful_suggestions/len(test_contexts)*100:.1f}%)")
    
    # Test 4: Test similarity search directly
    print("\n4Ô∏è‚É£ Testing direct similarity search...")
    
    search_queries = [
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è RAG",
        "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
        "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ Python",
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    ]
    
    for query in search_queries:
        try:
            similar = await secure_rag_engine.find_similar_messages_secure(
                session_id=test_session,
                chat_id=test_chat,
                query_text=query,
                limit=3,
                score_threshold=0.1
            )
            
            print(f"   üîç Query: '{query}' -> Found {len(similar)} similar messages")
            
            for i, msg in enumerate(similar[:2], 1):
                score = msg.get("score", 0)
                metadata = msg.get("metadata", {})
                length = metadata.get("text_length", 0)
                
                print(f"      {i}. Score: {score:.3f}, Length: {length} chars")
                
        except Exception as e:
            print(f"   ‚ùå Search error for '{query}': {e}")
    
    # Test 5: Recommendations for improvement
    print("\n5Ô∏è‚É£ Recommendations...")
    
    if total_messages < 1000:
        print("   üí° RAG –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("      –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ bulk sync —á–µ—Ä–µ–∑ UI Settings")
        print("      –¶–µ–ª—å: >5000 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    if successful_suggestions < len(test_contexts) * 0.8:
        print("   üí° –ù–∏–∑–∫–∏–π —É—Å–ø–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        print("      –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("      - –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –≤ RAG")
        print("      - –í—ã—Å–æ–∫–∏–π threshold –¥–ª—è –ø–æ–∏—Å–∫–∞")
        print("      - –ü—Ä–æ–±–ª–µ–º—ã —Å embeddings")
    
    print("\nüéâ RAG —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    return successful_suggestions > 0

if __name__ == "__main__":
    asyncio.run(test_rag_sync_functionality()) 