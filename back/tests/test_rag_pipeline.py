#!/usr/bin/env python3
"""
Test script for RAG Pipeline with LangChain integration
This demonstrates the full RAG-enhanced suggestion workflow
"""

import asyncio
import os
import sys
from datetime import datetime

# Add the back directory to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_rag_pipeline():
    """Test the RAG pipeline functionality"""
    print("üß† Testing RAG Pipeline with LangChain Integration")
    print("=" * 60)
    
    # Load environment variables first
    from dotenv import load_dotenv
    
    # Try different env file paths
    env_paths = ["envcopy.txt", ".env", "../back/envcopy.txt", "back/envcopy.txt"]
    env_loaded = False
    
    for path in env_paths:
        if os.path.exists(path):
            load_dotenv(path, override=True)
            print(f"‚úÖ Loaded environment from: {path}")
            env_loaded = True
            break
    
    if not env_loaded:
        print("‚ùå Could not find environment file")
        return
    
    # Import after env is loaded
    from ai.rag_pipeline import rag_pipeline
    from ai.secure_rag_engine import secure_rag_engine
    
    # Test configuration
    session_id = "test_session_rag"
    chat_id = 54321
    
    print("\nüìä Testing RAG Pipeline Components...")
    print(f"OpenAI Client: {'‚úÖ Available' if rag_pipeline.openai_client else '‚ùå Not available'}")
    print(f"RAG Chain: {'‚úÖ Available' if rag_pipeline.rag_chain else '‚ùå Not available'}")
    print(f"Secure RAG Engine: {'‚úÖ Available' if rag_pipeline.rag_engine else '‚ùå Not available'}")
    
    if not rag_pipeline.rag_chain:
        print("\n‚ùå RAG pipeline not available - check OpenAI API key")
        return
    
    # Test 1: Store some messages first
    print("\n1Ô∏è‚É£ Storing test messages for RAG context...")
    test_messages = [
        {
            "id": 101,
            "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?",
            "date": "2024-01-20T10:00:00",
            "sender_id": 201,
            "sender_name": "–ê–Ω–Ω–∞",
            "is_outgoing": False,
            "media": None
        },
        {
            "id": 102, 
            "text": "–û—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º RAG-–ø–∞–π–ø–ª–∞–π–Ω–æ–º –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
            "date": "2024-01-20T10:05:00",
            "sender_id": 202,
            "sender_name": "–õ–µ–≤",
            "is_outgoing": True,
            "media": None
        },
        {
            "id": 103,
            "text": "–ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! RAG —ç—Ç–æ Retrieval-Augmented Generation?",
            "date": "2024-01-20T10:07:00", 
            "sender_id": 201,
            "sender_name": "–ê–Ω–Ω–∞",
            "is_outgoing": False,
            "media": None
        },
        {
            "id": 104,
            "text": "–î–∞, –∏–º–µ–Ω–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
            "date": "2024-01-20T10:10:00",
            "sender_id": 202,
            "sender_name": "–õ–µ–≤", 
            "is_outgoing": True,
            "media": None
        }
    ]
    
    stored_count = 0
    for message in test_messages:
        success = await secure_rag_engine.store_message_securely(
            session_id, chat_id, message
        )
        if success:
            stored_count += 1
    
    print(f"   üìà Stored {stored_count}/{len(test_messages)} messages for RAG context")
    
    # Test 2: Analyze user style with RAG
    print("\n2Ô∏è‚É£ Testing enhanced user style analysis...")
    user_style = await rag_pipeline.analyze_user_style_with_rag(
        session_id=session_id,
        chat_id=chat_id,
        recent_messages=test_messages
    )
    
    print(f"   üìä Style analysis results:")
    print(f"      RAG Enhanced: {user_style.get('rag_enhanced', False)}")
    print(f"      Style Confidence: {user_style.get('style_confidence', 0):.2f}")
    print(f"      Similar Messages: {user_style.get('similar_messages_analyzed', 0)}")
    print(f"      Primary Language: {user_style.get('primary_language', 'unknown')}")
    
    # Test 3: Generate RAG suggestions
    print("\n3Ô∏è‚É£ Testing RAG-enhanced suggestion generation...")
    
    test_contexts = [
        {
            "context": "–ê–Ω–Ω–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ RAG —Å–∏—Å—Ç–µ–º—É",
            "type": "response"
        },
        {
            "context": "–ù—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
            "type": "proactive"
        }
    ]
    
    for i, test_case in enumerate(test_contexts):
        print(f"\n   üîç Test Case {i+1}: {test_case['context']}")
        
        suggestion_result = await rag_pipeline.generate_rag_suggestion(
            session_id=session_id,
            chat_id=chat_id,
            current_context=test_case["context"],
            user_style=user_style,
            suggestion_type=test_case["type"]
        )
        
        if suggestion_result.get("suggestion"):
            print(f"      ‚úÖ Suggestion: {suggestion_result['suggestion']}")
            print(f"      üìä Confidence: {suggestion_result.get('confidence', 0):.2f}")
            print(f"      üìÑ Sources: {suggestion_result.get('source_count', 0)}")
            print(f"      üß† RAG Enhanced: {suggestion_result.get('rag_enhanced', False)}")
        else:
            print(f"      ‚ùå No suggestion generated")
            if "error" in suggestion_result:
                print(f"      Error: {suggestion_result['error']}")
    
    # Test 4: Direct RAG search
    print("\n4Ô∏è‚É£ Testing direct RAG search...")
    try:
        # Test direct similarity search via secure RAG engine
        similar_messages = await secure_rag_engine.find_similar_messages_secure(
            session_id=session_id,
            chat_id=chat_id,
            query_text="AI –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            limit=3,
            score_threshold=0.2
        )
        
        print(f"   üìö Found {len(similar_messages)} similar messages")
        for j, msg in enumerate(similar_messages):
            score = msg.get("score", 0)
            metadata = msg.get("metadata", {})
            print(f"      Message {j+1}: Score {score:.3f} - {metadata.get('date', 'unknown')}")
            
    except Exception as e:
        print(f"   ‚ùå Direct RAG search error: {e}")
    
    # Test 5: Cleanup
    print("\n5Ô∏è‚É£ Cleaning up test data...")
    cleanup_success = await secure_rag_engine.clear_chat_data_secure(session_id, chat_id)
    if cleanup_success:
        print("   ‚úÖ Test data cleaned up successfully")
    else:
        print("   ‚ùå Failed to clean up test data")
    
    print("\nüéâ RAG Pipeline test completed!")
    print("=" * 60)
    print("\nüìã Summary:")
    print("‚úÖ RAG Pipeline with direct OpenAI integration working")
    print("‚úÖ OpenAI embeddings for high-quality vectors")
    print("‚úÖ Enhanced user style analysis with RAG context")
    print("‚úÖ Intelligent suggestion generation")
    print("‚úÖ Privacy-protected secure storage")

if __name__ == "__main__":
    asyncio.run(test_rag_pipeline()) 